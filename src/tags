!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	settings.py	/^DEBUG = True;$/;"	v
args	split.py	/^   args = parser.parse_args()$/;"	v
computeTimeSigList	split.py	/^def computeTimeSigList(origScore):$/;"	f
defaultOutputDir	settings.py	/^defaultOutputDir =  recordPath $/;"	v
defaultOutputFormat	settings.py	/^defaultOutputFormat = '.mid'$/;"	v
defaultScoreFilename	settings.py	/^defaultScoreFilename =  scorePath + 'test2.score.mid'$/;"	v
filename	corp2midi.py	/^filename = 'testBach'$/;"	v
generatePerf	musicGenerator.py	/^def generatePerf(score, recLogFilename):$/;"	f
getRecLogFilename	settings.py	/^def getRecLogFilename(scoreFilename):$/;"	f
getScoreName	settings.py	/^def getScoreName(scoreFilename):$/;"	f
help	split.py	/^                       help="Output Directory",$/;"	v
help	split.py	/^                       help="Path to score file",$/;"	v
help	split.py	/^                       help="Path to split record generated by recordExprPerf.py",$/;"	v
logFilename	utest_musicGenerator.py	/^logFilename = '..\/records\/test.mid.4.log'$/;"	v
main	recordExprPerf.py	/^def main():$/;"	f
makeMidi	runMatlab.py	/^def makeMidi():$/;"	f
mf	corp2midi.py	/^mf = music21.midi.translate.streamToMidiFile(sBach.parts[0])$/;"	v
midiExample	pygameMidiExample.py	/^def midiExample():$/;"	f
outFilename	utest_musicGenerator.py	/^outFilename = '..\/records\/test.mid.4.log'$/;"	v
parseRecLog	musicGenerator.py	/^def parseRecLog(filename):$/;"	f
parser	split.py	/^   parser = argparse.ArgumentParser()$/;"	v
perf	utest_musicGenerator.py	/^perf = generatePerf(logFilename)$/;"	v
playNote	record.py	/^def playNote(n):$/;"	f
playStream	record.py	/^def playStream(s):$/;"	f
printDebug	settings.py	/^def printDebug(string):$/;"	f
recLog	utest_musicGenerator.py	/^recLog = parseRecLog(logFilename)$/;"	v
record	record.py	/^def record(score, recLogFilename):$/;"	f
recordAll	recordExprPerf.py	/^def recordAll(score, args, splitRecord = [], counter = 1): #score needs to be flat$/;"	f
recordPath	settings.py	/^recordPath = '..\/records\/';$/;"	v
sBach	corp2midi.py	/^sBach = music21.corpus.parse('bach\/bwv7.7')$/;"	v
savePerf2File	musicGenerator.py	/^def savePerf2File(perf, outFilename):$/;"	f
scoreFile	testSplit.py	/^scoreFile = '..\/score\/mahler.mid'$/;"	v
scorePath	settings.py	/^scorePath = '..\/score\/'$/;"	v
split	split.py	/^def split(splitRecFilename, origScoreFilename):$/;"	f
splitFile	testSplit.py	/^splitFile = '..\/records\/test2.split.json'$/;"	v
writeSegments	split.py	/^def writeSegments(splitRec, scoreElemsAll, args, counter = 1): #score needs to be flat$/;"	f
